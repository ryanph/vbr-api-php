<?php
/**
 * JobStatesFilters
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Veeam Backup & Replication REST API
 *
 * This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br> Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic.
 *
 * The version of the OpenAPI document: 1.0-rev1
 * Contact: support@veeam.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * JobStatesFilters Class Doc Comment
 *
 * @category Class
 * @description Filters jobs by the specified parameters.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class JobStatesFilters implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'JobStatesFilters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'skip' => 'int',
        'limit' => 'int',
        'order_column' => '\OpenAPI\Client\Model\EJobStatesFiltersOrderColumn',
        'order_asc' => 'bool',
        'id_filter' => 'string',
        'name_filter' => 'string',
        'type_filter' => '\OpenAPI\Client\Model\EJobType',
        'last_result_filter' => '\OpenAPI\Client\Model\ESessionResult',
        'status_filter' => '\OpenAPI\Client\Model\EJobStatus',
        'workload_filter' => '\OpenAPI\Client\Model\EJobWorkload',
        'last_run_after_filter' => '\DateTime',
        'last_run_before_filter' => '\DateTime',
        'is_high_priority_job_filter' => 'bool',
        'repository_id_filter' => 'string',
        'objects_count_filter' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'skip' => 'int32',
        'limit' => 'int32',
        'order_column' => null,
        'order_asc' => null,
        'id_filter' => 'uuid',
        'name_filter' => null,
        'type_filter' => null,
        'last_result_filter' => null,
        'status_filter' => null,
        'workload_filter' => null,
        'last_run_after_filter' => 'date-time',
        'last_run_before_filter' => 'date-time',
        'is_high_priority_job_filter' => null,
        'repository_id_filter' => 'uuid',
        'objects_count_filter' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'skip' => false,
		'limit' => false,
		'order_column' => false,
		'order_asc' => false,
		'id_filter' => false,
		'name_filter' => false,
		'type_filter' => false,
		'last_result_filter' => false,
		'status_filter' => false,
		'workload_filter' => false,
		'last_run_after_filter' => false,
		'last_run_before_filter' => false,
		'is_high_priority_job_filter' => false,
		'repository_id_filter' => false,
		'objects_count_filter' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'skip' => 'skip',
        'limit' => 'limit',
        'order_column' => 'orderColumn',
        'order_asc' => 'orderAsc',
        'id_filter' => 'idFilter',
        'name_filter' => 'nameFilter',
        'type_filter' => 'typeFilter',
        'last_result_filter' => 'lastResultFilter',
        'status_filter' => 'statusFilter',
        'workload_filter' => 'workloadFilter',
        'last_run_after_filter' => 'lastRunAfterFilter',
        'last_run_before_filter' => 'lastRunBeforeFilter',
        'is_high_priority_job_filter' => 'isHighPriorityJobFilter',
        'repository_id_filter' => 'repositoryIdFilter',
        'objects_count_filter' => 'objectsCountFilter'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'skip' => 'setSkip',
        'limit' => 'setLimit',
        'order_column' => 'setOrderColumn',
        'order_asc' => 'setOrderAsc',
        'id_filter' => 'setIdFilter',
        'name_filter' => 'setNameFilter',
        'type_filter' => 'setTypeFilter',
        'last_result_filter' => 'setLastResultFilter',
        'status_filter' => 'setStatusFilter',
        'workload_filter' => 'setWorkloadFilter',
        'last_run_after_filter' => 'setLastRunAfterFilter',
        'last_run_before_filter' => 'setLastRunBeforeFilter',
        'is_high_priority_job_filter' => 'setIsHighPriorityJobFilter',
        'repository_id_filter' => 'setRepositoryIdFilter',
        'objects_count_filter' => 'setObjectsCountFilter'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'skip' => 'getSkip',
        'limit' => 'getLimit',
        'order_column' => 'getOrderColumn',
        'order_asc' => 'getOrderAsc',
        'id_filter' => 'getIdFilter',
        'name_filter' => 'getNameFilter',
        'type_filter' => 'getTypeFilter',
        'last_result_filter' => 'getLastResultFilter',
        'status_filter' => 'getStatusFilter',
        'workload_filter' => 'getWorkloadFilter',
        'last_run_after_filter' => 'getLastRunAfterFilter',
        'last_run_before_filter' => 'getLastRunBeforeFilter',
        'is_high_priority_job_filter' => 'getIsHighPriorityJobFilter',
        'repository_id_filter' => 'getRepositoryIdFilter',
        'objects_count_filter' => 'getObjectsCountFilter'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('skip', $data ?? [], null);
        $this->setIfExists('limit', $data ?? [], null);
        $this->setIfExists('order_column', $data ?? [], null);
        $this->setIfExists('order_asc', $data ?? [], null);
        $this->setIfExists('id_filter', $data ?? [], null);
        $this->setIfExists('name_filter', $data ?? [], null);
        $this->setIfExists('type_filter', $data ?? [], null);
        $this->setIfExists('last_result_filter', $data ?? [], null);
        $this->setIfExists('status_filter', $data ?? [], null);
        $this->setIfExists('workload_filter', $data ?? [], null);
        $this->setIfExists('last_run_after_filter', $data ?? [], null);
        $this->setIfExists('last_run_before_filter', $data ?? [], null);
        $this->setIfExists('is_high_priority_job_filter', $data ?? [], null);
        $this->setIfExists('repository_id_filter', $data ?? [], null);
        $this->setIfExists('objects_count_filter', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets skip
     *
     * @return int|null
     */
    public function getSkip()
    {
        return $this->container['skip'];
    }

    /**
     * Sets skip
     *
     * @param int|null $skip Skips the specified number of jobs.
     *
     * @return self
     */
    public function setSkip($skip)
    {
        if (is_null($skip)) {
            throw new \InvalidArgumentException('non-nullable skip cannot be null');
        }
        $this->container['skip'] = $skip;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return int|null
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param int|null $limit Returns the specified number of jobs.
     *
     * @return self
     */
    public function setLimit($limit)
    {
        if (is_null($limit)) {
            throw new \InvalidArgumentException('non-nullable limit cannot be null');
        }
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets order_column
     *
     * @return \OpenAPI\Client\Model\EJobStatesFiltersOrderColumn|null
     */
    public function getOrderColumn()
    {
        return $this->container['order_column'];
    }

    /**
     * Sets order_column
     *
     * @param \OpenAPI\Client\Model\EJobStatesFiltersOrderColumn|null $order_column order_column
     *
     * @return self
     */
    public function setOrderColumn($order_column)
    {
        if (is_null($order_column)) {
            throw new \InvalidArgumentException('non-nullable order_column cannot be null');
        }
        $this->container['order_column'] = $order_column;

        return $this;
    }

    /**
     * Gets order_asc
     *
     * @return bool|null
     */
    public function getOrderAsc()
    {
        return $this->container['order_asc'];
    }

    /**
     * Sets order_asc
     *
     * @param bool|null $order_asc Sorts jobs in the ascending order by the `orderColumn` parameter.
     *
     * @return self
     */
    public function setOrderAsc($order_asc)
    {
        if (is_null($order_asc)) {
            throw new \InvalidArgumentException('non-nullable order_asc cannot be null');
        }
        $this->container['order_asc'] = $order_asc;

        return $this;
    }

    /**
     * Gets id_filter
     *
     * @return string|null
     */
    public function getIdFilter()
    {
        return $this->container['id_filter'];
    }

    /**
     * Sets id_filter
     *
     * @param string|null $id_filter id_filter
     *
     * @return self
     */
    public function setIdFilter($id_filter)
    {
        if (is_null($id_filter)) {
            throw new \InvalidArgumentException('non-nullable id_filter cannot be null');
        }
        $this->container['id_filter'] = $id_filter;

        return $this;
    }

    /**
     * Gets name_filter
     *
     * @return string|null
     */
    public function getNameFilter()
    {
        return $this->container['name_filter'];
    }

    /**
     * Sets name_filter
     *
     * @param string|null $name_filter Filters jobs by the `nameFilter` pattern. The pattern can match any job state parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.
     *
     * @return self
     */
    public function setNameFilter($name_filter)
    {
        if (is_null($name_filter)) {
            throw new \InvalidArgumentException('non-nullable name_filter cannot be null');
        }
        $this->container['name_filter'] = $name_filter;

        return $this;
    }

    /**
     * Gets type_filter
     *
     * @return \OpenAPI\Client\Model\EJobType|null
     */
    public function getTypeFilter()
    {
        return $this->container['type_filter'];
    }

    /**
     * Sets type_filter
     *
     * @param \OpenAPI\Client\Model\EJobType|null $type_filter type_filter
     *
     * @return self
     */
    public function setTypeFilter($type_filter)
    {
        if (is_null($type_filter)) {
            throw new \InvalidArgumentException('non-nullable type_filter cannot be null');
        }
        $this->container['type_filter'] = $type_filter;

        return $this;
    }

    /**
     * Gets last_result_filter
     *
     * @return \OpenAPI\Client\Model\ESessionResult|null
     */
    public function getLastResultFilter()
    {
        return $this->container['last_result_filter'];
    }

    /**
     * Sets last_result_filter
     *
     * @param \OpenAPI\Client\Model\ESessionResult|null $last_result_filter last_result_filter
     *
     * @return self
     */
    public function setLastResultFilter($last_result_filter)
    {
        if (is_null($last_result_filter)) {
            throw new \InvalidArgumentException('non-nullable last_result_filter cannot be null');
        }
        $this->container['last_result_filter'] = $last_result_filter;

        return $this;
    }

    /**
     * Gets status_filter
     *
     * @return \OpenAPI\Client\Model\EJobStatus|null
     */
    public function getStatusFilter()
    {
        return $this->container['status_filter'];
    }

    /**
     * Sets status_filter
     *
     * @param \OpenAPI\Client\Model\EJobStatus|null $status_filter status_filter
     *
     * @return self
     */
    public function setStatusFilter($status_filter)
    {
        if (is_null($status_filter)) {
            throw new \InvalidArgumentException('non-nullable status_filter cannot be null');
        }
        $this->container['status_filter'] = $status_filter;

        return $this;
    }

    /**
     * Gets workload_filter
     *
     * @return \OpenAPI\Client\Model\EJobWorkload|null
     */
    public function getWorkloadFilter()
    {
        return $this->container['workload_filter'];
    }

    /**
     * Sets workload_filter
     *
     * @param \OpenAPI\Client\Model\EJobWorkload|null $workload_filter workload_filter
     *
     * @return self
     */
    public function setWorkloadFilter($workload_filter)
    {
        if (is_null($workload_filter)) {
            throw new \InvalidArgumentException('non-nullable workload_filter cannot be null');
        }
        $this->container['workload_filter'] = $workload_filter;

        return $this;
    }

    /**
     * Gets last_run_after_filter
     *
     * @return \DateTime|null
     */
    public function getLastRunAfterFilter()
    {
        return $this->container['last_run_after_filter'];
    }

    /**
     * Sets last_run_after_filter
     *
     * @param \DateTime|null $last_run_after_filter last_run_after_filter
     *
     * @return self
     */
    public function setLastRunAfterFilter($last_run_after_filter)
    {
        if (is_null($last_run_after_filter)) {
            throw new \InvalidArgumentException('non-nullable last_run_after_filter cannot be null');
        }
        $this->container['last_run_after_filter'] = $last_run_after_filter;

        return $this;
    }

    /**
     * Gets last_run_before_filter
     *
     * @return \DateTime|null
     */
    public function getLastRunBeforeFilter()
    {
        return $this->container['last_run_before_filter'];
    }

    /**
     * Sets last_run_before_filter
     *
     * @param \DateTime|null $last_run_before_filter last_run_before_filter
     *
     * @return self
     */
    public function setLastRunBeforeFilter($last_run_before_filter)
    {
        if (is_null($last_run_before_filter)) {
            throw new \InvalidArgumentException('non-nullable last_run_before_filter cannot be null');
        }
        $this->container['last_run_before_filter'] = $last_run_before_filter;

        return $this;
    }

    /**
     * Gets is_high_priority_job_filter
     *
     * @return bool|null
     */
    public function getIsHighPriorityJobFilter()
    {
        return $this->container['is_high_priority_job_filter'];
    }

    /**
     * Sets is_high_priority_job_filter
     *
     * @param bool|null $is_high_priority_job_filter is_high_priority_job_filter
     *
     * @return self
     */
    public function setIsHighPriorityJobFilter($is_high_priority_job_filter)
    {
        if (is_null($is_high_priority_job_filter)) {
            throw new \InvalidArgumentException('non-nullable is_high_priority_job_filter cannot be null');
        }
        $this->container['is_high_priority_job_filter'] = $is_high_priority_job_filter;

        return $this;
    }

    /**
     * Gets repository_id_filter
     *
     * @return string|null
     */
    public function getRepositoryIdFilter()
    {
        return $this->container['repository_id_filter'];
    }

    /**
     * Sets repository_id_filter
     *
     * @param string|null $repository_id_filter repository_id_filter
     *
     * @return self
     */
    public function setRepositoryIdFilter($repository_id_filter)
    {
        if (is_null($repository_id_filter)) {
            throw new \InvalidArgumentException('non-nullable repository_id_filter cannot be null');
        }
        $this->container['repository_id_filter'] = $repository_id_filter;

        return $this;
    }

    /**
     * Gets objects_count_filter
     *
     * @return int|null
     */
    public function getObjectsCountFilter()
    {
        return $this->container['objects_count_filter'];
    }

    /**
     * Sets objects_count_filter
     *
     * @param int|null $objects_count_filter objects_count_filter
     *
     * @return self
     */
    public function setObjectsCountFilter($objects_count_filter)
    {
        if (is_null($objects_count_filter)) {
            throw new \InvalidArgumentException('non-nullable objects_count_filter cannot be null');
        }
        $this->container['objects_count_filter'] = $objects_count_filter;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


