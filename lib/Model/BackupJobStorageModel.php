<?php
/**
 * BackupJobStorageModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Veeam Backup & Replication REST API
 *
 * This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br> Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic.
 *
 * The version of the OpenAPI document: 1.0-rev1
 * Contact: support@veeam.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BackupJobStorageModel Class Doc Comment
 *
 * @category Class
 * @description Backup storage settings.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BackupJobStorageModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BackupJobStorageModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'backup_repository_id' => 'string',
        'backup_proxies' => '\OpenAPI\Client\Model\BackupProxiesSettingsModel',
        'retention_policy' => '\OpenAPI\Client\Model\BackupJobRetentionPolicySettingsModel',
        'gfs_policy' => '\OpenAPI\Client\Model\GFSPolicySettingsModel',
        'advanced_settings' => '\OpenAPI\Client\Model\BackupJobAdvancedSettingsModel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'backup_repository_id' => 'uuid',
        'backup_proxies' => null,
        'retention_policy' => null,
        'gfs_policy' => null,
        'advanced_settings' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'backup_repository_id' => false,
		'backup_proxies' => false,
		'retention_policy' => false,
		'gfs_policy' => false,
		'advanced_settings' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'backup_repository_id' => 'backupRepositoryId',
        'backup_proxies' => 'backupProxies',
        'retention_policy' => 'retentionPolicy',
        'gfs_policy' => 'gfsPolicy',
        'advanced_settings' => 'advancedSettings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'backup_repository_id' => 'setBackupRepositoryId',
        'backup_proxies' => 'setBackupProxies',
        'retention_policy' => 'setRetentionPolicy',
        'gfs_policy' => 'setGfsPolicy',
        'advanced_settings' => 'setAdvancedSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'backup_repository_id' => 'getBackupRepositoryId',
        'backup_proxies' => 'getBackupProxies',
        'retention_policy' => 'getRetentionPolicy',
        'gfs_policy' => 'getGfsPolicy',
        'advanced_settings' => 'getAdvancedSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('backup_repository_id', $data ?? [], null);
        $this->setIfExists('backup_proxies', $data ?? [], null);
        $this->setIfExists('retention_policy', $data ?? [], null);
        $this->setIfExists('gfs_policy', $data ?? [], null);
        $this->setIfExists('advanced_settings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['backup_repository_id'] === null) {
            $invalidProperties[] = "'backup_repository_id' can't be null";
        }
        if ($this->container['backup_proxies'] === null) {
            $invalidProperties[] = "'backup_proxies' can't be null";
        }
        if ($this->container['retention_policy'] === null) {
            $invalidProperties[] = "'retention_policy' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets backup_repository_id
     *
     * @return string
     */
    public function getBackupRepositoryId()
    {
        return $this->container['backup_repository_id'];
    }

    /**
     * Sets backup_repository_id
     *
     * @param string $backup_repository_id ID of the backup repository.
     *
     * @return self
     */
    public function setBackupRepositoryId($backup_repository_id)
    {
        if (is_null($backup_repository_id)) {
            throw new \InvalidArgumentException('non-nullable backup_repository_id cannot be null');
        }
        $this->container['backup_repository_id'] = $backup_repository_id;

        return $this;
    }

    /**
     * Gets backup_proxies
     *
     * @return \OpenAPI\Client\Model\BackupProxiesSettingsModel
     */
    public function getBackupProxies()
    {
        return $this->container['backup_proxies'];
    }

    /**
     * Sets backup_proxies
     *
     * @param \OpenAPI\Client\Model\BackupProxiesSettingsModel $backup_proxies backup_proxies
     *
     * @return self
     */
    public function setBackupProxies($backup_proxies)
    {
        if (is_null($backup_proxies)) {
            throw new \InvalidArgumentException('non-nullable backup_proxies cannot be null');
        }
        $this->container['backup_proxies'] = $backup_proxies;

        return $this;
    }

    /**
     * Gets retention_policy
     *
     * @return \OpenAPI\Client\Model\BackupJobRetentionPolicySettingsModel
     */
    public function getRetentionPolicy()
    {
        return $this->container['retention_policy'];
    }

    /**
     * Sets retention_policy
     *
     * @param \OpenAPI\Client\Model\BackupJobRetentionPolicySettingsModel $retention_policy retention_policy
     *
     * @return self
     */
    public function setRetentionPolicy($retention_policy)
    {
        if (is_null($retention_policy)) {
            throw new \InvalidArgumentException('non-nullable retention_policy cannot be null');
        }
        $this->container['retention_policy'] = $retention_policy;

        return $this;
    }

    /**
     * Gets gfs_policy
     *
     * @return \OpenAPI\Client\Model\GFSPolicySettingsModel|null
     */
    public function getGfsPolicy()
    {
        return $this->container['gfs_policy'];
    }

    /**
     * Sets gfs_policy
     *
     * @param \OpenAPI\Client\Model\GFSPolicySettingsModel|null $gfs_policy gfs_policy
     *
     * @return self
     */
    public function setGfsPolicy($gfs_policy)
    {
        if (is_null($gfs_policy)) {
            throw new \InvalidArgumentException('non-nullable gfs_policy cannot be null');
        }
        $this->container['gfs_policy'] = $gfs_policy;

        return $this;
    }

    /**
     * Gets advanced_settings
     *
     * @return \OpenAPI\Client\Model\BackupJobAdvancedSettingsModel|null
     */
    public function getAdvancedSettings()
    {
        return $this->container['advanced_settings'];
    }

    /**
     * Sets advanced_settings
     *
     * @param \OpenAPI\Client\Model\BackupJobAdvancedSettingsModel|null $advanced_settings advanced_settings
     *
     * @return self
     */
    public function setAdvancedSettings($advanced_settings)
    {
        if (is_null($advanced_settings)) {
            throw new \InvalidArgumentException('non-nullable advanced_settings cannot be null');
        }
        $this->container['advanced_settings'] = $advanced_settings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


