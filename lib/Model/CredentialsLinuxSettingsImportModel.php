<?php
/**
 * CredentialsLinuxSettingsImportModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Veeam Backup & Replication REST API
 *
 * This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br> Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic.
 *
 * The version of the OpenAPI document: 1.0-rev1
 * Contact: support@veeam.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CredentialsLinuxSettingsImportModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CredentialsLinuxSettingsImportModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CredentialsLinuxSettingsImportModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ssh_port' => 'int',
        'auto_elevated' => 'bool',
        'add_to_sudoers' => 'bool',
        'use_su' => 'bool',
        'private_key' => 'string',
        'passphrase' => 'string',
        'root_password' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ssh_port' => null,
        'auto_elevated' => null,
        'add_to_sudoers' => null,
        'use_su' => null,
        'private_key' => null,
        'passphrase' => null,
        'root_password' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ssh_port' => false,
		'auto_elevated' => false,
		'add_to_sudoers' => false,
		'use_su' => false,
		'private_key' => false,
		'passphrase' => false,
		'root_password' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ssh_port' => 'SSHPort',
        'auto_elevated' => 'autoElevated',
        'add_to_sudoers' => 'addToSudoers',
        'use_su' => 'useSu',
        'private_key' => 'privateKey',
        'passphrase' => 'passphrase',
        'root_password' => 'rootPassword'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ssh_port' => 'setSshPort',
        'auto_elevated' => 'setAutoElevated',
        'add_to_sudoers' => 'setAddToSudoers',
        'use_su' => 'setUseSu',
        'private_key' => 'setPrivateKey',
        'passphrase' => 'setPassphrase',
        'root_password' => 'setRootPassword'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ssh_port' => 'getSshPort',
        'auto_elevated' => 'getAutoElevated',
        'add_to_sudoers' => 'getAddToSudoers',
        'use_su' => 'getUseSu',
        'private_key' => 'getPrivateKey',
        'passphrase' => 'getPassphrase',
        'root_password' => 'getRootPassword'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('ssh_port', $data ?? [], null);
        $this->setIfExists('auto_elevated', $data ?? [], null);
        $this->setIfExists('add_to_sudoers', $data ?? [], null);
        $this->setIfExists('use_su', $data ?? [], null);
        $this->setIfExists('private_key', $data ?? [], null);
        $this->setIfExists('passphrase', $data ?? [], null);
        $this->setIfExists('root_password', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ssh_port
     *
     * @return int|null
     */
    public function getSshPort()
    {
        return $this->container['ssh_port'];
    }

    /**
     * Sets ssh_port
     *
     * @param int|null $ssh_port SSH port used to connect to a Linux server.
     *
     * @return self
     */
    public function setSshPort($ssh_port)
    {
        if (is_null($ssh_port)) {
            throw new \InvalidArgumentException('non-nullable ssh_port cannot be null');
        }
        $this->container['ssh_port'] = $ssh_port;

        return $this;
    }

    /**
     * Gets auto_elevated
     *
     * @return bool|null
     */
    public function getAutoElevated()
    {
        return $this->container['auto_elevated'];
    }

    /**
     * Sets auto_elevated
     *
     * @param bool|null $auto_elevated If *true*, the permissions of the account are automatically elevated to the root user.
     *
     * @return self
     */
    public function setAutoElevated($auto_elevated)
    {
        if (is_null($auto_elevated)) {
            throw new \InvalidArgumentException('non-nullable auto_elevated cannot be null');
        }
        $this->container['auto_elevated'] = $auto_elevated;

        return $this;
    }

    /**
     * Gets add_to_sudoers
     *
     * @return bool|null
     */
    public function getAddToSudoers()
    {
        return $this->container['add_to_sudoers'];
    }

    /**
     * Sets add_to_sudoers
     *
     * @param bool|null $add_to_sudoers If *true*, the account is automatically added to the sudoers file.
     *
     * @return self
     */
    public function setAddToSudoers($add_to_sudoers)
    {
        if (is_null($add_to_sudoers)) {
            throw new \InvalidArgumentException('non-nullable add_to_sudoers cannot be null');
        }
        $this->container['add_to_sudoers'] = $add_to_sudoers;

        return $this;
    }

    /**
     * Gets use_su
     *
     * @return bool|null
     */
    public function getUseSu()
    {
        return $this->container['use_su'];
    }

    /**
     * Sets use_su
     *
     * @param bool|null $use_su If *true*, the `su` command is used for Linux distributions where the `sudo` command is not available.
     *
     * @return self
     */
    public function setUseSu($use_su)
    {
        if (is_null($use_su)) {
            throw new \InvalidArgumentException('non-nullable use_su cannot be null');
        }
        $this->container['use_su'] = $use_su;

        return $this;
    }

    /**
     * Gets private_key
     *
     * @return string|null
     */
    public function getPrivateKey()
    {
        return $this->container['private_key'];
    }

    /**
     * Sets private_key
     *
     * @param string|null $private_key Private key.
     *
     * @return self
     */
    public function setPrivateKey($private_key)
    {
        if (is_null($private_key)) {
            throw new \InvalidArgumentException('non-nullable private_key cannot be null');
        }
        $this->container['private_key'] = $private_key;

        return $this;
    }

    /**
     * Gets passphrase
     *
     * @return string|null
     */
    public function getPassphrase()
    {
        return $this->container['passphrase'];
    }

    /**
     * Sets passphrase
     *
     * @param string|null $passphrase Passphrase that protects the private key.
     *
     * @return self
     */
    public function setPassphrase($passphrase)
    {
        if (is_null($passphrase)) {
            throw new \InvalidArgumentException('non-nullable passphrase cannot be null');
        }
        $this->container['passphrase'] = $passphrase;

        return $this;
    }

    /**
     * Gets root_password
     *
     * @return string|null
     */
    public function getRootPassword()
    {
        return $this->container['root_password'];
    }

    /**
     * Sets root_password
     *
     * @param string|null $root_password Password for the root account.
     *
     * @return self
     */
    public function setRootPassword($root_password)
    {
        if (is_null($root_password)) {
            throw new \InvalidArgumentException('non-nullable root_password cannot be null');
        }
        $this->container['root_password'] = $root_password;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


