<?php
/**
 * BackupOracleSettingsImportModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Veeam Backup & Replication REST API
 *
 * This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br> Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic.
 *
 * The version of the OpenAPI document: 1.0-rev1
 * Contact: support@veeam.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BackupOracleSettingsImportModel Class Doc Comment
 *
 * @category Class
 * @description Oracle archived log settings.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BackupOracleSettingsImportModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BackupOracleSettingsImportModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'use_guest_credentials' => 'bool',
        'credentials' => '\OpenAPI\Client\Model\CredentialsImportModel',
        'archive_logs' => '\OpenAPI\Client\Model\EBackupOracleLogsSettings',
        'delete_hours_count' => 'int',
        'delete_gbs_count' => 'int',
        'backup_logs' => 'bool',
        'backup_mins_count' => 'int',
        'retain_log_backups' => '\OpenAPI\Client\Model\ERetainLogBackupsType',
        'keep_days_count' => 'int',
        'log_shipping_servers' => '\OpenAPI\Client\Model\BackupLogShippingServersImportModel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'use_guest_credentials' => null,
        'credentials' => null,
        'archive_logs' => null,
        'delete_hours_count' => null,
        'delete_gbs_count' => null,
        'backup_logs' => null,
        'backup_mins_count' => null,
        'retain_log_backups' => null,
        'keep_days_count' => null,
        'log_shipping_servers' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'use_guest_credentials' => false,
		'credentials' => false,
		'archive_logs' => false,
		'delete_hours_count' => false,
		'delete_gbs_count' => false,
		'backup_logs' => false,
		'backup_mins_count' => false,
		'retain_log_backups' => false,
		'keep_days_count' => false,
		'log_shipping_servers' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'use_guest_credentials' => 'useGuestCredentials',
        'credentials' => 'credentials',
        'archive_logs' => 'archiveLogs',
        'delete_hours_count' => 'deleteHoursCount',
        'delete_gbs_count' => 'deleteGBsCount',
        'backup_logs' => 'backupLogs',
        'backup_mins_count' => 'backupMinsCount',
        'retain_log_backups' => 'retainLogBackups',
        'keep_days_count' => 'keepDaysCount',
        'log_shipping_servers' => 'logShippingServers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'use_guest_credentials' => 'setUseGuestCredentials',
        'credentials' => 'setCredentials',
        'archive_logs' => 'setArchiveLogs',
        'delete_hours_count' => 'setDeleteHoursCount',
        'delete_gbs_count' => 'setDeleteGbsCount',
        'backup_logs' => 'setBackupLogs',
        'backup_mins_count' => 'setBackupMinsCount',
        'retain_log_backups' => 'setRetainLogBackups',
        'keep_days_count' => 'setKeepDaysCount',
        'log_shipping_servers' => 'setLogShippingServers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'use_guest_credentials' => 'getUseGuestCredentials',
        'credentials' => 'getCredentials',
        'archive_logs' => 'getArchiveLogs',
        'delete_hours_count' => 'getDeleteHoursCount',
        'delete_gbs_count' => 'getDeleteGbsCount',
        'backup_logs' => 'getBackupLogs',
        'backup_mins_count' => 'getBackupMinsCount',
        'retain_log_backups' => 'getRetainLogBackups',
        'keep_days_count' => 'getKeepDaysCount',
        'log_shipping_servers' => 'getLogShippingServers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('use_guest_credentials', $data ?? [], null);
        $this->setIfExists('credentials', $data ?? [], null);
        $this->setIfExists('archive_logs', $data ?? [], null);
        $this->setIfExists('delete_hours_count', $data ?? [], null);
        $this->setIfExists('delete_gbs_count', $data ?? [], null);
        $this->setIfExists('backup_logs', $data ?? [], null);
        $this->setIfExists('backup_mins_count', $data ?? [], null);
        $this->setIfExists('retain_log_backups', $data ?? [], null);
        $this->setIfExists('keep_days_count', $data ?? [], null);
        $this->setIfExists('log_shipping_servers', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['use_guest_credentials'] === null) {
            $invalidProperties[] = "'use_guest_credentials' can't be null";
        }
        if ($this->container['archive_logs'] === null) {
            $invalidProperties[] = "'archive_logs' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets use_guest_credentials
     *
     * @return bool
     */
    public function getUseGuestCredentials()
    {
        return $this->container['use_guest_credentials'];
    }

    /**
     * Sets use_guest_credentials
     *
     * @param bool $use_guest_credentials If *true*, Veeam Backup & Replication uses credentials specified in the guest processing settings.
     *
     * @return self
     */
    public function setUseGuestCredentials($use_guest_credentials)
    {
        if (is_null($use_guest_credentials)) {
            throw new \InvalidArgumentException('non-nullable use_guest_credentials cannot be null');
        }
        $this->container['use_guest_credentials'] = $use_guest_credentials;

        return $this;
    }

    /**
     * Gets credentials
     *
     * @return \OpenAPI\Client\Model\CredentialsImportModel|null
     */
    public function getCredentials()
    {
        return $this->container['credentials'];
    }

    /**
     * Sets credentials
     *
     * @param \OpenAPI\Client\Model\CredentialsImportModel|null $credentials credentials
     *
     * @return self
     */
    public function setCredentials($credentials)
    {
        if (is_null($credentials)) {
            throw new \InvalidArgumentException('non-nullable credentials cannot be null');
        }
        $this->container['credentials'] = $credentials;

        return $this;
    }

    /**
     * Gets archive_logs
     *
     * @return \OpenAPI\Client\Model\EBackupOracleLogsSettings
     */
    public function getArchiveLogs()
    {
        return $this->container['archive_logs'];
    }

    /**
     * Sets archive_logs
     *
     * @param \OpenAPI\Client\Model\EBackupOracleLogsSettings $archive_logs archive_logs
     *
     * @return self
     */
    public function setArchiveLogs($archive_logs)
    {
        if (is_null($archive_logs)) {
            throw new \InvalidArgumentException('non-nullable archive_logs cannot be null');
        }
        $this->container['archive_logs'] = $archive_logs;

        return $this;
    }

    /**
     * Gets delete_hours_count
     *
     * @return int|null
     */
    public function getDeleteHoursCount()
    {
        return $this->container['delete_hours_count'];
    }

    /**
     * Sets delete_hours_count
     *
     * @param int|null $delete_hours_count Time period in hours to keep archived logs. This parameter should be specified if the `EBackupOracleLogsSettings` value is *deleteExpiredHours*.
     *
     * @return self
     */
    public function setDeleteHoursCount($delete_hours_count)
    {
        if (is_null($delete_hours_count)) {
            throw new \InvalidArgumentException('non-nullable delete_hours_count cannot be null');
        }
        $this->container['delete_hours_count'] = $delete_hours_count;

        return $this;
    }

    /**
     * Gets delete_gbs_count
     *
     * @return int|null
     */
    public function getDeleteGbsCount()
    {
        return $this->container['delete_gbs_count'];
    }

    /**
     * Sets delete_gbs_count
     *
     * @param int|null $delete_gbs_count Maximum size for archived logs in GB. This parameter should be specified if the `EBackupOracleLogsSettings` value is *deleteExpiredGBs*.
     *
     * @return self
     */
    public function setDeleteGbsCount($delete_gbs_count)
    {
        if (is_null($delete_gbs_count)) {
            throw new \InvalidArgumentException('non-nullable delete_gbs_count cannot be null');
        }
        $this->container['delete_gbs_count'] = $delete_gbs_count;

        return $this;
    }

    /**
     * Gets backup_logs
     *
     * @return bool|null
     */
    public function getBackupLogs()
    {
        return $this->container['backup_logs'];
    }

    /**
     * Sets backup_logs
     *
     * @param bool|null $backup_logs If *true*, archived logs are backed up.
     *
     * @return self
     */
    public function setBackupLogs($backup_logs)
    {
        if (is_null($backup_logs)) {
            throw new \InvalidArgumentException('non-nullable backup_logs cannot be null');
        }
        $this->container['backup_logs'] = $backup_logs;

        return $this;
    }

    /**
     * Gets backup_mins_count
     *
     * @return int|null
     */
    public function getBackupMinsCount()
    {
        return $this->container['backup_mins_count'];
    }

    /**
     * Sets backup_mins_count
     *
     * @param int|null $backup_mins_count Frequency of archived log backup, in minutes.
     *
     * @return self
     */
    public function setBackupMinsCount($backup_mins_count)
    {
        if (is_null($backup_mins_count)) {
            throw new \InvalidArgumentException('non-nullable backup_mins_count cannot be null');
        }
        $this->container['backup_mins_count'] = $backup_mins_count;

        return $this;
    }

    /**
     * Gets retain_log_backups
     *
     * @return \OpenAPI\Client\Model\ERetainLogBackupsType|null
     */
    public function getRetainLogBackups()
    {
        return $this->container['retain_log_backups'];
    }

    /**
     * Sets retain_log_backups
     *
     * @param \OpenAPI\Client\Model\ERetainLogBackupsType|null $retain_log_backups retain_log_backups
     *
     * @return self
     */
    public function setRetainLogBackups($retain_log_backups)
    {
        if (is_null($retain_log_backups)) {
            throw new \InvalidArgumentException('non-nullable retain_log_backups cannot be null');
        }
        $this->container['retain_log_backups'] = $retain_log_backups;

        return $this;
    }

    /**
     * Gets keep_days_count
     *
     * @return int|null
     */
    public function getKeepDaysCount()
    {
        return $this->container['keep_days_count'];
    }

    /**
     * Sets keep_days_count
     *
     * @param int|null $keep_days_count Number of days to keep archived logs.
     *
     * @return self
     */
    public function setKeepDaysCount($keep_days_count)
    {
        if (is_null($keep_days_count)) {
            throw new \InvalidArgumentException('non-nullable keep_days_count cannot be null');
        }
        $this->container['keep_days_count'] = $keep_days_count;

        return $this;
    }

    /**
     * Gets log_shipping_servers
     *
     * @return \OpenAPI\Client\Model\BackupLogShippingServersImportModel|null
     */
    public function getLogShippingServers()
    {
        return $this->container['log_shipping_servers'];
    }

    /**
     * Sets log_shipping_servers
     *
     * @param \OpenAPI\Client\Model\BackupLogShippingServersImportModel|null $log_shipping_servers log_shipping_servers
     *
     * @return self
     */
    public function setLogShippingServers($log_shipping_servers)
    {
        if (is_null($log_shipping_servers)) {
            throw new \InvalidArgumentException('non-nullable log_shipping_servers cannot be null');
        }
        $this->container['log_shipping_servers'] = $log_shipping_servers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


