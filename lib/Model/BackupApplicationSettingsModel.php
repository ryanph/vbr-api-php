<?php
/**
 * BackupApplicationSettingsModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Veeam Backup & Replication REST API
 *
 * This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br> Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic.
 *
 * The version of the OpenAPI document: 1.0-rev1
 * Contact: support@veeam.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BackupApplicationSettingsModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BackupApplicationSettingsModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BackupApplicationSettingsModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'vm_object' => '\OpenAPI\Client\Model\VmwareObjectModel',
        'vss' => '\OpenAPI\Client\Model\EApplicationSettingsVSS',
        'use_persistent_guest_agent' => 'bool',
        'transaction_logs' => '\OpenAPI\Client\Model\ETransactionLogsSettings',
        'sql' => '\OpenAPI\Client\Model\BackupSQLSettingsModel',
        'oracle' => '\OpenAPI\Client\Model\BackupOracleSettingsModel',
        'exclusions' => '\OpenAPI\Client\Model\BackupFSExclusionsModel',
        'scripts' => '\OpenAPI\Client\Model\BackupScriptSettingsModel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'vm_object' => null,
        'vss' => null,
        'use_persistent_guest_agent' => null,
        'transaction_logs' => null,
        'sql' => null,
        'oracle' => null,
        'exclusions' => null,
        'scripts' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'vm_object' => false,
		'vss' => false,
		'use_persistent_guest_agent' => false,
		'transaction_logs' => false,
		'sql' => false,
		'oracle' => false,
		'exclusions' => false,
		'scripts' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vm_object' => 'vmObject',
        'vss' => 'vss',
        'use_persistent_guest_agent' => 'usePersistentGuestAgent',
        'transaction_logs' => 'transactionLogs',
        'sql' => 'sql',
        'oracle' => 'oracle',
        'exclusions' => 'exclusions',
        'scripts' => 'scripts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vm_object' => 'setVmObject',
        'vss' => 'setVss',
        'use_persistent_guest_agent' => 'setUsePersistentGuestAgent',
        'transaction_logs' => 'setTransactionLogs',
        'sql' => 'setSql',
        'oracle' => 'setOracle',
        'exclusions' => 'setExclusions',
        'scripts' => 'setScripts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vm_object' => 'getVmObject',
        'vss' => 'getVss',
        'use_persistent_guest_agent' => 'getUsePersistentGuestAgent',
        'transaction_logs' => 'getTransactionLogs',
        'sql' => 'getSql',
        'oracle' => 'getOracle',
        'exclusions' => 'getExclusions',
        'scripts' => 'getScripts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('vm_object', $data ?? [], null);
        $this->setIfExists('vss', $data ?? [], null);
        $this->setIfExists('use_persistent_guest_agent', $data ?? [], null);
        $this->setIfExists('transaction_logs', $data ?? [], null);
        $this->setIfExists('sql', $data ?? [], null);
        $this->setIfExists('oracle', $data ?? [], null);
        $this->setIfExists('exclusions', $data ?? [], null);
        $this->setIfExists('scripts', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['vm_object'] === null) {
            $invalidProperties[] = "'vm_object' can't be null";
        }
        if ($this->container['vss'] === null) {
            $invalidProperties[] = "'vss' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vm_object
     *
     * @return \OpenAPI\Client\Model\VmwareObjectModel
     */
    public function getVmObject()
    {
        return $this->container['vm_object'];
    }

    /**
     * Sets vm_object
     *
     * @param \OpenAPI\Client\Model\VmwareObjectModel $vm_object vm_object
     *
     * @return self
     */
    public function setVmObject($vm_object)
    {
        if (is_null($vm_object)) {
            throw new \InvalidArgumentException('non-nullable vm_object cannot be null');
        }
        $this->container['vm_object'] = $vm_object;

        return $this;
    }

    /**
     * Gets vss
     *
     * @return \OpenAPI\Client\Model\EApplicationSettingsVSS
     */
    public function getVss()
    {
        return $this->container['vss'];
    }

    /**
     * Sets vss
     *
     * @param \OpenAPI\Client\Model\EApplicationSettingsVSS $vss vss
     *
     * @return self
     */
    public function setVss($vss)
    {
        if (is_null($vss)) {
            throw new \InvalidArgumentException('non-nullable vss cannot be null');
        }
        $this->container['vss'] = $vss;

        return $this;
    }

    /**
     * Gets use_persistent_guest_agent
     *
     * @return bool|null
     */
    public function getUsePersistentGuestAgent()
    {
        return $this->container['use_persistent_guest_agent'];
    }

    /**
     * Sets use_persistent_guest_agent
     *
     * @param bool|null $use_persistent_guest_agent If *true*, persistent guest agent is used.
     *
     * @return self
     */
    public function setUsePersistentGuestAgent($use_persistent_guest_agent)
    {
        if (is_null($use_persistent_guest_agent)) {
            throw new \InvalidArgumentException('non-nullable use_persistent_guest_agent cannot be null');
        }
        $this->container['use_persistent_guest_agent'] = $use_persistent_guest_agent;

        return $this;
    }

    /**
     * Gets transaction_logs
     *
     * @return \OpenAPI\Client\Model\ETransactionLogsSettings|null
     */
    public function getTransactionLogs()
    {
        return $this->container['transaction_logs'];
    }

    /**
     * Sets transaction_logs
     *
     * @param \OpenAPI\Client\Model\ETransactionLogsSettings|null $transaction_logs transaction_logs
     *
     * @return self
     */
    public function setTransactionLogs($transaction_logs)
    {
        if (is_null($transaction_logs)) {
            throw new \InvalidArgumentException('non-nullable transaction_logs cannot be null');
        }
        $this->container['transaction_logs'] = $transaction_logs;

        return $this;
    }

    /**
     * Gets sql
     *
     * @return \OpenAPI\Client\Model\BackupSQLSettingsModel|null
     */
    public function getSql()
    {
        return $this->container['sql'];
    }

    /**
     * Sets sql
     *
     * @param \OpenAPI\Client\Model\BackupSQLSettingsModel|null $sql sql
     *
     * @return self
     */
    public function setSql($sql)
    {
        if (is_null($sql)) {
            throw new \InvalidArgumentException('non-nullable sql cannot be null');
        }
        $this->container['sql'] = $sql;

        return $this;
    }

    /**
     * Gets oracle
     *
     * @return \OpenAPI\Client\Model\BackupOracleSettingsModel|null
     */
    public function getOracle()
    {
        return $this->container['oracle'];
    }

    /**
     * Sets oracle
     *
     * @param \OpenAPI\Client\Model\BackupOracleSettingsModel|null $oracle oracle
     *
     * @return self
     */
    public function setOracle($oracle)
    {
        if (is_null($oracle)) {
            throw new \InvalidArgumentException('non-nullable oracle cannot be null');
        }
        $this->container['oracle'] = $oracle;

        return $this;
    }

    /**
     * Gets exclusions
     *
     * @return \OpenAPI\Client\Model\BackupFSExclusionsModel|null
     */
    public function getExclusions()
    {
        return $this->container['exclusions'];
    }

    /**
     * Sets exclusions
     *
     * @param \OpenAPI\Client\Model\BackupFSExclusionsModel|null $exclusions exclusions
     *
     * @return self
     */
    public function setExclusions($exclusions)
    {
        if (is_null($exclusions)) {
            throw new \InvalidArgumentException('non-nullable exclusions cannot be null');
        }
        $this->container['exclusions'] = $exclusions;

        return $this;
    }

    /**
     * Gets scripts
     *
     * @return \OpenAPI\Client\Model\BackupScriptSettingsModel|null
     */
    public function getScripts()
    {
        return $this->container['scripts'];
    }

    /**
     * Sets scripts
     *
     * @param \OpenAPI\Client\Model\BackupScriptSettingsModel|null $scripts scripts
     *
     * @return self
     */
    public function setScripts($scripts)
    {
        if (is_null($scripts)) {
            throw new \InvalidArgumentException('non-nullable scripts cannot be null');
        }
        $this->container['scripts'] = $scripts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


