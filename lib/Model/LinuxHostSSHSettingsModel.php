<?php
/**
 * LinuxHostSSHSettingsModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Veeam Backup & Replication REST API
 *
 * This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br> Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic.
 *
 * The version of the OpenAPI document: 1.0-rev1
 * Contact: support@veeam.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LinuxHostSSHSettingsModel Class Doc Comment
 *
 * @category Class
 * @description SSH settings.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LinuxHostSSHSettingsModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LinuxHostSSHSettingsModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ssh_time_out_ms' => 'int',
        'port_range_start' => 'int',
        'port_range_end' => 'int',
        'server_this_side' => 'bool',
        'management_port' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ssh_time_out_ms' => null,
        'port_range_start' => null,
        'port_range_end' => null,
        'server_this_side' => null,
        'management_port' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ssh_time_out_ms' => false,
		'port_range_start' => false,
		'port_range_end' => false,
		'server_this_side' => false,
		'management_port' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ssh_time_out_ms' => 'sshTimeOutMs',
        'port_range_start' => 'portRangeStart',
        'port_range_end' => 'portRangeEnd',
        'server_this_side' => 'serverThisSide',
        'management_port' => 'managementPort'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ssh_time_out_ms' => 'setSshTimeOutMs',
        'port_range_start' => 'setPortRangeStart',
        'port_range_end' => 'setPortRangeEnd',
        'server_this_side' => 'setServerThisSide',
        'management_port' => 'setManagementPort'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ssh_time_out_ms' => 'getSshTimeOutMs',
        'port_range_start' => 'getPortRangeStart',
        'port_range_end' => 'getPortRangeEnd',
        'server_this_side' => 'getServerThisSide',
        'management_port' => 'getManagementPort'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('ssh_time_out_ms', $data ?? [], null);
        $this->setIfExists('port_range_start', $data ?? [], null);
        $this->setIfExists('port_range_end', $data ?? [], null);
        $this->setIfExists('server_this_side', $data ?? [], null);
        $this->setIfExists('management_port', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ssh_time_out_ms
     *
     * @return int|null
     */
    public function getSshTimeOutMs()
    {
        return $this->container['ssh_time_out_ms'];
    }

    /**
     * Sets ssh_time_out_ms
     *
     * @param int|null $ssh_time_out_ms SSH timeout, in ms. If a task targeted at the server is inactive after the timeout, the task is terminated.
     *
     * @return self
     */
    public function setSshTimeOutMs($ssh_time_out_ms)
    {
        if (is_null($ssh_time_out_ms)) {
            throw new \InvalidArgumentException('non-nullable ssh_time_out_ms cannot be null');
        }
        $this->container['ssh_time_out_ms'] = $ssh_time_out_ms;

        return $this;
    }

    /**
     * Gets port_range_start
     *
     * @return int|null
     */
    public function getPortRangeStart()
    {
        return $this->container['port_range_start'];
    }

    /**
     * Sets port_range_start
     *
     * @param int|null $port_range_start Start port used for data transfer.
     *
     * @return self
     */
    public function setPortRangeStart($port_range_start)
    {
        if (is_null($port_range_start)) {
            throw new \InvalidArgumentException('non-nullable port_range_start cannot be null');
        }
        $this->container['port_range_start'] = $port_range_start;

        return $this;
    }

    /**
     * Gets port_range_end
     *
     * @return int|null
     */
    public function getPortRangeEnd()
    {
        return $this->container['port_range_end'];
    }

    /**
     * Sets port_range_end
     *
     * @param int|null $port_range_end End port used for data transfer.
     *
     * @return self
     */
    public function setPortRangeEnd($port_range_end)
    {
        if (is_null($port_range_end)) {
            throw new \InvalidArgumentException('non-nullable port_range_end cannot be null');
        }
        $this->container['port_range_end'] = $port_range_end;

        return $this;
    }

    /**
     * Gets server_this_side
     *
     * @return bool|null
     */
    public function getServerThisSide()
    {
        return $this->container['server_this_side'];
    }

    /**
     * Sets server_this_side
     *
     * @param bool|null $server_this_side If *true*, the server is run on this side.
     *
     * @return self
     */
    public function setServerThisSide($server_this_side)
    {
        if (is_null($server_this_side)) {
            throw new \InvalidArgumentException('non-nullable server_this_side cannot be null');
        }
        $this->container['server_this_side'] = $server_this_side;

        return $this;
    }

    /**
     * Gets management_port
     *
     * @return int|null
     */
    public function getManagementPort()
    {
        return $this->container['management_port'];
    }

    /**
     * Sets management_port
     *
     * @param int|null $management_port Port used as a control channel from the Veeam Backup & Replication console to the Linux server.
     *
     * @return self
     */
    public function setManagementPort($management_port)
    {
        if (is_null($management_port)) {
            throw new \InvalidArgumentException('non-nullable management_port cannot be null');
        }
        $this->container['management_port'] = $management_port;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


