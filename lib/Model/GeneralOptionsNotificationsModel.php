<?php
/**
 * GeneralOptionsNotificationsModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Veeam Backup & Replication REST API
 *
 * This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br> Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic.
 *
 * The version of the OpenAPI document: 1.0-rev1
 * Contact: support@veeam.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GeneralOptionsNotificationsModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GeneralOptionsNotificationsModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GeneralOptionsNotificationsModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'storage_space_threshold_enabled' => 'bool',
        'storage_space_threshold' => 'int',
        'datastore_space_threshold_enabled' => 'bool',
        'datastore_space_threshold' => 'int',
        'skip_vm_space_threshold_enabled' => 'bool',
        'skip_vm_space_threshold' => 'int',
        'notify_on_support_expiration' => 'bool',
        'notify_on_updates' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'storage_space_threshold_enabled' => null,
        'storage_space_threshold' => 'int32',
        'datastore_space_threshold_enabled' => null,
        'datastore_space_threshold' => 'int32',
        'skip_vm_space_threshold_enabled' => null,
        'skip_vm_space_threshold' => 'int32',
        'notify_on_support_expiration' => null,
        'notify_on_updates' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'storage_space_threshold_enabled' => false,
		'storage_space_threshold' => false,
		'datastore_space_threshold_enabled' => false,
		'datastore_space_threshold' => false,
		'skip_vm_space_threshold_enabled' => false,
		'skip_vm_space_threshold' => false,
		'notify_on_support_expiration' => false,
		'notify_on_updates' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'storage_space_threshold_enabled' => 'storageSpaceThresholdEnabled',
        'storage_space_threshold' => 'storageSpaceThreshold',
        'datastore_space_threshold_enabled' => 'datastoreSpaceThresholdEnabled',
        'datastore_space_threshold' => 'datastoreSpaceThreshold',
        'skip_vm_space_threshold_enabled' => 'skipVMSpaceThresholdEnabled',
        'skip_vm_space_threshold' => 'skipVMSpaceThreshold',
        'notify_on_support_expiration' => 'notifyOnSupportExpiration',
        'notify_on_updates' => 'notifyOnUpdates'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'storage_space_threshold_enabled' => 'setStorageSpaceThresholdEnabled',
        'storage_space_threshold' => 'setStorageSpaceThreshold',
        'datastore_space_threshold_enabled' => 'setDatastoreSpaceThresholdEnabled',
        'datastore_space_threshold' => 'setDatastoreSpaceThreshold',
        'skip_vm_space_threshold_enabled' => 'setSkipVmSpaceThresholdEnabled',
        'skip_vm_space_threshold' => 'setSkipVmSpaceThreshold',
        'notify_on_support_expiration' => 'setNotifyOnSupportExpiration',
        'notify_on_updates' => 'setNotifyOnUpdates'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'storage_space_threshold_enabled' => 'getStorageSpaceThresholdEnabled',
        'storage_space_threshold' => 'getStorageSpaceThreshold',
        'datastore_space_threshold_enabled' => 'getDatastoreSpaceThresholdEnabled',
        'datastore_space_threshold' => 'getDatastoreSpaceThreshold',
        'skip_vm_space_threshold_enabled' => 'getSkipVmSpaceThresholdEnabled',
        'skip_vm_space_threshold' => 'getSkipVmSpaceThreshold',
        'notify_on_support_expiration' => 'getNotifyOnSupportExpiration',
        'notify_on_updates' => 'getNotifyOnUpdates'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('storage_space_threshold_enabled', $data ?? [], null);
        $this->setIfExists('storage_space_threshold', $data ?? [], null);
        $this->setIfExists('datastore_space_threshold_enabled', $data ?? [], null);
        $this->setIfExists('datastore_space_threshold', $data ?? [], null);
        $this->setIfExists('skip_vm_space_threshold_enabled', $data ?? [], null);
        $this->setIfExists('skip_vm_space_threshold', $data ?? [], null);
        $this->setIfExists('notify_on_support_expiration', $data ?? [], null);
        $this->setIfExists('notify_on_updates', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['storage_space_threshold_enabled'] === null) {
            $invalidProperties[] = "'storage_space_threshold_enabled' can't be null";
        }
        if ($this->container['storage_space_threshold'] === null) {
            $invalidProperties[] = "'storage_space_threshold' can't be null";
        }
        if ($this->container['datastore_space_threshold_enabled'] === null) {
            $invalidProperties[] = "'datastore_space_threshold_enabled' can't be null";
        }
        if ($this->container['datastore_space_threshold'] === null) {
            $invalidProperties[] = "'datastore_space_threshold' can't be null";
        }
        if ($this->container['skip_vm_space_threshold_enabled'] === null) {
            $invalidProperties[] = "'skip_vm_space_threshold_enabled' can't be null";
        }
        if ($this->container['skip_vm_space_threshold'] === null) {
            $invalidProperties[] = "'skip_vm_space_threshold' can't be null";
        }
        if ($this->container['notify_on_support_expiration'] === null) {
            $invalidProperties[] = "'notify_on_support_expiration' can't be null";
        }
        if ($this->container['notify_on_updates'] === null) {
            $invalidProperties[] = "'notify_on_updates' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets storage_space_threshold_enabled
     *
     * @return bool
     */
    public function getStorageSpaceThresholdEnabled()
    {
        return $this->container['storage_space_threshold_enabled'];
    }

    /**
     * Sets storage_space_threshold_enabled
     *
     * @param bool $storage_space_threshold_enabled If *true*, notifications about critical amount of free space in backup storage are enabled.
     *
     * @return self
     */
    public function setStorageSpaceThresholdEnabled($storage_space_threshold_enabled)
    {
        if (is_null($storage_space_threshold_enabled)) {
            throw new \InvalidArgumentException('non-nullable storage_space_threshold_enabled cannot be null');
        }
        $this->container['storage_space_threshold_enabled'] = $storage_space_threshold_enabled;

        return $this;
    }

    /**
     * Gets storage_space_threshold
     *
     * @return int
     */
    public function getStorageSpaceThreshold()
    {
        return $this->container['storage_space_threshold'];
    }

    /**
     * Sets storage_space_threshold
     *
     * @param int $storage_space_threshold Space threshold of backup storage, in percent.
     *
     * @return self
     */
    public function setStorageSpaceThreshold($storage_space_threshold)
    {
        if (is_null($storage_space_threshold)) {
            throw new \InvalidArgumentException('non-nullable storage_space_threshold cannot be null');
        }
        $this->container['storage_space_threshold'] = $storage_space_threshold;

        return $this;
    }

    /**
     * Gets datastore_space_threshold_enabled
     *
     * @return bool
     */
    public function getDatastoreSpaceThresholdEnabled()
    {
        return $this->container['datastore_space_threshold_enabled'];
    }

    /**
     * Sets datastore_space_threshold_enabled
     *
     * @param bool $datastore_space_threshold_enabled If *true*, notifications about critical amount of free space in production datastore are enabled.
     *
     * @return self
     */
    public function setDatastoreSpaceThresholdEnabled($datastore_space_threshold_enabled)
    {
        if (is_null($datastore_space_threshold_enabled)) {
            throw new \InvalidArgumentException('non-nullable datastore_space_threshold_enabled cannot be null');
        }
        $this->container['datastore_space_threshold_enabled'] = $datastore_space_threshold_enabled;

        return $this;
    }

    /**
     * Gets datastore_space_threshold
     *
     * @return int
     */
    public function getDatastoreSpaceThreshold()
    {
        return $this->container['datastore_space_threshold'];
    }

    /**
     * Sets datastore_space_threshold
     *
     * @param int $datastore_space_threshold Space threshold of production datastore, in percent.
     *
     * @return self
     */
    public function setDatastoreSpaceThreshold($datastore_space_threshold)
    {
        if (is_null($datastore_space_threshold)) {
            throw new \InvalidArgumentException('non-nullable datastore_space_threshold cannot be null');
        }
        $this->container['datastore_space_threshold'] = $datastore_space_threshold;

        return $this;
    }

    /**
     * Gets skip_vm_space_threshold_enabled
     *
     * @return bool
     */
    public function getSkipVmSpaceThresholdEnabled()
    {
        return $this->container['skip_vm_space_threshold_enabled'];
    }

    /**
     * Sets skip_vm_space_threshold_enabled
     *
     * @param bool $skip_vm_space_threshold_enabled If *true* and the `skipVMSpaceThreshold` threshold is reached, Veeam Backup & Replication terminates backup and replication jobs working with production datastores before VM snapshots are taken.
     *
     * @return self
     */
    public function setSkipVmSpaceThresholdEnabled($skip_vm_space_threshold_enabled)
    {
        if (is_null($skip_vm_space_threshold_enabled)) {
            throw new \InvalidArgumentException('non-nullable skip_vm_space_threshold_enabled cannot be null');
        }
        $this->container['skip_vm_space_threshold_enabled'] = $skip_vm_space_threshold_enabled;

        return $this;
    }

    /**
     * Gets skip_vm_space_threshold
     *
     * @return int
     */
    public function getSkipVmSpaceThreshold()
    {
        return $this->container['skip_vm_space_threshold'];
    }

    /**
     * Sets skip_vm_space_threshold
     *
     * @param int $skip_vm_space_threshold Space threshold of production datastore, in percent.
     *
     * @return self
     */
    public function setSkipVmSpaceThreshold($skip_vm_space_threshold)
    {
        if (is_null($skip_vm_space_threshold)) {
            throw new \InvalidArgumentException('non-nullable skip_vm_space_threshold cannot be null');
        }
        $this->container['skip_vm_space_threshold'] = $skip_vm_space_threshold;

        return $this;
    }

    /**
     * Gets notify_on_support_expiration
     *
     * @return bool
     */
    public function getNotifyOnSupportExpiration()
    {
        return $this->container['notify_on_support_expiration'];
    }

    /**
     * Sets notify_on_support_expiration
     *
     * @param bool $notify_on_support_expiration If *true*, notifications about support contract expiration are enabled.
     *
     * @return self
     */
    public function setNotifyOnSupportExpiration($notify_on_support_expiration)
    {
        if (is_null($notify_on_support_expiration)) {
            throw new \InvalidArgumentException('non-nullable notify_on_support_expiration cannot be null');
        }
        $this->container['notify_on_support_expiration'] = $notify_on_support_expiration;

        return $this;
    }

    /**
     * Gets notify_on_updates
     *
     * @return bool
     */
    public function getNotifyOnUpdates()
    {
        return $this->container['notify_on_updates'];
    }

    /**
     * Sets notify_on_updates
     *
     * @param bool $notify_on_updates If *true*, notifications about updates are enabled.
     *
     * @return self
     */
    public function setNotifyOnUpdates($notify_on_updates)
    {
        if (is_null($notify_on_updates)) {
            throw new \InvalidArgumentException('non-nullable notify_on_updates cannot be null');
        }
        $this->container['notify_on_updates'] = $notify_on_updates;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


