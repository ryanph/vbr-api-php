<?php
/**
 * GeneralOptionsEmailNotificationsModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Veeam Backup & Replication REST API
 *
 * This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br> Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic.
 *
 * The version of the OpenAPI document: 1.0-rev1
 * Contact: support@veeam.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GeneralOptionsEmailNotificationsModel Class Doc Comment
 *
 * @category Class
 * @description Global email notification settings.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GeneralOptionsEmailNotificationsModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GeneralOptionsEmailNotificationsModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'is_enabled' => 'bool',
        'smtp_server_name' => 'string',
        'advanced_smtp_options' => '\OpenAPI\Client\Model\AdvancedSmtpOptionsModel',
        'from' => 'string',
        'to' => 'string',
        'subject' => 'string',
        'send_daily_reports_at' => '\DateTime',
        'notify_on_success' => 'bool',
        'notify_on_warning' => 'bool',
        'notify_on_failure' => 'bool',
        'notify_on_last_retry' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'is_enabled' => null,
        'smtp_server_name' => null,
        'advanced_smtp_options' => null,
        'from' => null,
        'to' => null,
        'subject' => null,
        'send_daily_reports_at' => 'date-time',
        'notify_on_success' => null,
        'notify_on_warning' => null,
        'notify_on_failure' => null,
        'notify_on_last_retry' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'is_enabled' => false,
		'smtp_server_name' => false,
		'advanced_smtp_options' => false,
		'from' => false,
		'to' => false,
		'subject' => false,
		'send_daily_reports_at' => false,
		'notify_on_success' => false,
		'notify_on_warning' => false,
		'notify_on_failure' => false,
		'notify_on_last_retry' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_enabled' => 'isEnabled',
        'smtp_server_name' => 'smtpServerName',
        'advanced_smtp_options' => 'advancedSmtpOptions',
        'from' => 'from',
        'to' => 'to',
        'subject' => 'subject',
        'send_daily_reports_at' => 'sendDailyReportsAt',
        'notify_on_success' => 'notifyOnSuccess',
        'notify_on_warning' => 'notifyOnWarning',
        'notify_on_failure' => 'notifyOnFailure',
        'notify_on_last_retry' => 'notifyOnLastRetry'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_enabled' => 'setIsEnabled',
        'smtp_server_name' => 'setSmtpServerName',
        'advanced_smtp_options' => 'setAdvancedSmtpOptions',
        'from' => 'setFrom',
        'to' => 'setTo',
        'subject' => 'setSubject',
        'send_daily_reports_at' => 'setSendDailyReportsAt',
        'notify_on_success' => 'setNotifyOnSuccess',
        'notify_on_warning' => 'setNotifyOnWarning',
        'notify_on_failure' => 'setNotifyOnFailure',
        'notify_on_last_retry' => 'setNotifyOnLastRetry'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_enabled' => 'getIsEnabled',
        'smtp_server_name' => 'getSmtpServerName',
        'advanced_smtp_options' => 'getAdvancedSmtpOptions',
        'from' => 'getFrom',
        'to' => 'getTo',
        'subject' => 'getSubject',
        'send_daily_reports_at' => 'getSendDailyReportsAt',
        'notify_on_success' => 'getNotifyOnSuccess',
        'notify_on_warning' => 'getNotifyOnWarning',
        'notify_on_failure' => 'getNotifyOnFailure',
        'notify_on_last_retry' => 'getNotifyOnLastRetry'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('is_enabled', $data ?? [], null);
        $this->setIfExists('smtp_server_name', $data ?? [], null);
        $this->setIfExists('advanced_smtp_options', $data ?? [], null);
        $this->setIfExists('from', $data ?? [], null);
        $this->setIfExists('to', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('send_daily_reports_at', $data ?? [], null);
        $this->setIfExists('notify_on_success', $data ?? [], null);
        $this->setIfExists('notify_on_warning', $data ?? [], null);
        $this->setIfExists('notify_on_failure', $data ?? [], null);
        $this->setIfExists('notify_on_last_retry', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['is_enabled'] === null) {
            $invalidProperties[] = "'is_enabled' can't be null";
        }
        if ($this->container['smtp_server_name'] === null) {
            $invalidProperties[] = "'smtp_server_name' can't be null";
        }
        if ($this->container['advanced_smtp_options'] === null) {
            $invalidProperties[] = "'advanced_smtp_options' can't be null";
        }
        if ($this->container['from'] === null) {
            $invalidProperties[] = "'from' can't be null";
        }
        if ($this->container['to'] === null) {
            $invalidProperties[] = "'to' can't be null";
        }
        if ($this->container['subject'] === null) {
            $invalidProperties[] = "'subject' can't be null";
        }
        if ($this->container['send_daily_reports_at'] === null) {
            $invalidProperties[] = "'send_daily_reports_at' can't be null";
        }
        if ($this->container['notify_on_success'] === null) {
            $invalidProperties[] = "'notify_on_success' can't be null";
        }
        if ($this->container['notify_on_warning'] === null) {
            $invalidProperties[] = "'notify_on_warning' can't be null";
        }
        if ($this->container['notify_on_failure'] === null) {
            $invalidProperties[] = "'notify_on_failure' can't be null";
        }
        if ($this->container['notify_on_last_retry'] === null) {
            $invalidProperties[] = "'notify_on_last_retry' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_enabled
     *
     * @return bool
     */
    public function getIsEnabled()
    {
        return $this->container['is_enabled'];
    }

    /**
     * Sets is_enabled
     *
     * @param bool $is_enabled If *true*, global email notification settings are enabled.
     *
     * @return self
     */
    public function setIsEnabled($is_enabled)
    {
        if (is_null($is_enabled)) {
            throw new \InvalidArgumentException('non-nullable is_enabled cannot be null');
        }
        $this->container['is_enabled'] = $is_enabled;

        return $this;
    }

    /**
     * Gets smtp_server_name
     *
     * @return string
     */
    public function getSmtpServerName()
    {
        return $this->container['smtp_server_name'];
    }

    /**
     * Sets smtp_server_name
     *
     * @param string $smtp_server_name Full DNS name or IP address of the SMTP server.
     *
     * @return self
     */
    public function setSmtpServerName($smtp_server_name)
    {
        if (is_null($smtp_server_name)) {
            throw new \InvalidArgumentException('non-nullable smtp_server_name cannot be null');
        }
        $this->container['smtp_server_name'] = $smtp_server_name;

        return $this;
    }

    /**
     * Gets advanced_smtp_options
     *
     * @return \OpenAPI\Client\Model\AdvancedSmtpOptionsModel
     */
    public function getAdvancedSmtpOptions()
    {
        return $this->container['advanced_smtp_options'];
    }

    /**
     * Sets advanced_smtp_options
     *
     * @param \OpenAPI\Client\Model\AdvancedSmtpOptionsModel $advanced_smtp_options advanced_smtp_options
     *
     * @return self
     */
    public function setAdvancedSmtpOptions($advanced_smtp_options)
    {
        if (is_null($advanced_smtp_options)) {
            throw new \InvalidArgumentException('non-nullable advanced_smtp_options cannot be null');
        }
        $this->container['advanced_smtp_options'] = $advanced_smtp_options;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string $from Email address from which email notifications must be sent.
     *
     * @return self
     */
    public function setFrom($from)
    {
        if (is_null($from)) {
            throw new \InvalidArgumentException('non-nullable from cannot be null');
        }
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string $to Recipient email addresses. Use a semicolon to separate multiple addresses.
     *
     * @return self
     */
    public function setTo($to)
    {
        if (is_null($to)) {
            throw new \InvalidArgumentException('non-nullable to cannot be null');
        }
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject Notification subject. Use the following variables in the subject:<br> <ol>   <li>%Time% — completion time</li>   <li>%JobName%</li>   <li>%JobResult%</li>   <li>%ObjectCount% — number of VMs in the job</li>   <li>%Issues% — number of VMs in the job that have been processed with the Warning or Failed status</li> </ol>
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if (is_null($subject)) {
            throw new \InvalidArgumentException('non-nullable subject cannot be null');
        }
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets send_daily_reports_at
     *
     * @return \DateTime
     */
    public function getSendDailyReportsAt()
    {
        return $this->container['send_daily_reports_at'];
    }

    /**
     * Sets send_daily_reports_at
     *
     * @param \DateTime $send_daily_reports_at Time when Veeam Backup & Replication sends daily email reports.
     *
     * @return self
     */
    public function setSendDailyReportsAt($send_daily_reports_at)
    {
        if (is_null($send_daily_reports_at)) {
            throw new \InvalidArgumentException('non-nullable send_daily_reports_at cannot be null');
        }
        $this->container['send_daily_reports_at'] = $send_daily_reports_at;

        return $this;
    }

    /**
     * Gets notify_on_success
     *
     * @return bool
     */
    public function getNotifyOnSuccess()
    {
        return $this->container['notify_on_success'];
    }

    /**
     * Sets notify_on_success
     *
     * @param bool $notify_on_success If *true*, email notifications are sent when the job completes successfully.
     *
     * @return self
     */
    public function setNotifyOnSuccess($notify_on_success)
    {
        if (is_null($notify_on_success)) {
            throw new \InvalidArgumentException('non-nullable notify_on_success cannot be null');
        }
        $this->container['notify_on_success'] = $notify_on_success;

        return $this;
    }

    /**
     * Gets notify_on_warning
     *
     * @return bool
     */
    public function getNotifyOnWarning()
    {
        return $this->container['notify_on_warning'];
    }

    /**
     * Sets notify_on_warning
     *
     * @param bool $notify_on_warning If *true*, email notifications are sent when the job completes with a warning.
     *
     * @return self
     */
    public function setNotifyOnWarning($notify_on_warning)
    {
        if (is_null($notify_on_warning)) {
            throw new \InvalidArgumentException('non-nullable notify_on_warning cannot be null');
        }
        $this->container['notify_on_warning'] = $notify_on_warning;

        return $this;
    }

    /**
     * Gets notify_on_failure
     *
     * @return bool
     */
    public function getNotifyOnFailure()
    {
        return $this->container['notify_on_failure'];
    }

    /**
     * Sets notify_on_failure
     *
     * @param bool $notify_on_failure If *true*, email notifications are sent when the job fails.
     *
     * @return self
     */
    public function setNotifyOnFailure($notify_on_failure)
    {
        if (is_null($notify_on_failure)) {
            throw new \InvalidArgumentException('non-nullable notify_on_failure cannot be null');
        }
        $this->container['notify_on_failure'] = $notify_on_failure;

        return $this;
    }

    /**
     * Gets notify_on_last_retry
     *
     * @return bool
     */
    public function getNotifyOnLastRetry()
    {
        return $this->container['notify_on_last_retry'];
    }

    /**
     * Sets notify_on_last_retry
     *
     * @param bool $notify_on_last_retry If *true*, email notifications are sent about the final job status only (not per every job retry).
     *
     * @return self
     */
    public function setNotifyOnLastRetry($notify_on_last_retry)
    {
        if (is_null($notify_on_last_retry)) {
            throw new \InvalidArgumentException('non-nullable notify_on_last_retry cannot be null');
        }
        $this->container['notify_on_last_retry'] = $notify_on_last_retry;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


