<?php
/**
 * CapacityTierModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Veeam Backup & Replication REST API
 *
 * This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br> Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic.
 *
 * The version of the OpenAPI document: 1.0-rev1
 * Contact: support@veeam.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CapacityTierModel Class Doc Comment
 *
 * @category Class
 * @description Capacity tier.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CapacityTierModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CapacityTierModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'enabled' => 'bool',
        'extent_id' => 'string',
        'offload_window' => '\OpenAPI\Client\Model\BackupWindowSettingModel',
        'copy_policy_enabled' => 'bool',
        'move_policy_enabled' => 'bool',
        'operational_restore_period_days' => 'int',
        'override_policy' => '\OpenAPI\Client\Model\CapacityTierOverridePolicyModel',
        'encryption' => '\OpenAPI\Client\Model\BackupStorageSettingsEncryptionModel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'enabled' => null,
        'extent_id' => 'uuid',
        'offload_window' => null,
        'copy_policy_enabled' => null,
        'move_policy_enabled' => null,
        'operational_restore_period_days' => null,
        'override_policy' => null,
        'encryption' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'enabled' => false,
		'extent_id' => false,
		'offload_window' => false,
		'copy_policy_enabled' => false,
		'move_policy_enabled' => false,
		'operational_restore_period_days' => false,
		'override_policy' => false,
		'encryption' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enabled' => 'enabled',
        'extent_id' => 'extentId',
        'offload_window' => 'offloadWindow',
        'copy_policy_enabled' => 'copyPolicyEnabled',
        'move_policy_enabled' => 'movePolicyEnabled',
        'operational_restore_period_days' => 'operationalRestorePeriodDays',
        'override_policy' => 'overridePolicy',
        'encryption' => 'encryption'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enabled' => 'setEnabled',
        'extent_id' => 'setExtentId',
        'offload_window' => 'setOffloadWindow',
        'copy_policy_enabled' => 'setCopyPolicyEnabled',
        'move_policy_enabled' => 'setMovePolicyEnabled',
        'operational_restore_period_days' => 'setOperationalRestorePeriodDays',
        'override_policy' => 'setOverridePolicy',
        'encryption' => 'setEncryption'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enabled' => 'getEnabled',
        'extent_id' => 'getExtentId',
        'offload_window' => 'getOffloadWindow',
        'copy_policy_enabled' => 'getCopyPolicyEnabled',
        'move_policy_enabled' => 'getMovePolicyEnabled',
        'operational_restore_period_days' => 'getOperationalRestorePeriodDays',
        'override_policy' => 'getOverridePolicy',
        'encryption' => 'getEncryption'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('extent_id', $data ?? [], null);
        $this->setIfExists('offload_window', $data ?? [], null);
        $this->setIfExists('copy_policy_enabled', $data ?? [], null);
        $this->setIfExists('move_policy_enabled', $data ?? [], null);
        $this->setIfExists('operational_restore_period_days', $data ?? [], null);
        $this->setIfExists('override_policy', $data ?? [], null);
        $this->setIfExists('encryption', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled If *true*, the capacity tier is enabled.
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets extent_id
     *
     * @return string|null
     */
    public function getExtentId()
    {
        return $this->container['extent_id'];
    }

    /**
     * Sets extent_id
     *
     * @param string|null $extent_id ID of an object storage repository added as a capacity extent.
     *
     * @return self
     */
    public function setExtentId($extent_id)
    {
        if (is_null($extent_id)) {
            throw new \InvalidArgumentException('non-nullable extent_id cannot be null');
        }
        $this->container['extent_id'] = $extent_id;

        return $this;
    }

    /**
     * Gets offload_window
     *
     * @return \OpenAPI\Client\Model\BackupWindowSettingModel|null
     */
    public function getOffloadWindow()
    {
        return $this->container['offload_window'];
    }

    /**
     * Sets offload_window
     *
     * @param \OpenAPI\Client\Model\BackupWindowSettingModel|null $offload_window offload_window
     *
     * @return self
     */
    public function setOffloadWindow($offload_window)
    {
        if (is_null($offload_window)) {
            throw new \InvalidArgumentException('non-nullable offload_window cannot be null');
        }
        $this->container['offload_window'] = $offload_window;

        return $this;
    }

    /**
     * Gets copy_policy_enabled
     *
     * @return bool|null
     */
    public function getCopyPolicyEnabled()
    {
        return $this->container['copy_policy_enabled'];
    }

    /**
     * Sets copy_policy_enabled
     *
     * @param bool|null $copy_policy_enabled If *true*, Veeam Backup & Replication copies backups from the performance extents to the capacity extent as soon as the backups are created.
     *
     * @return self
     */
    public function setCopyPolicyEnabled($copy_policy_enabled)
    {
        if (is_null($copy_policy_enabled)) {
            throw new \InvalidArgumentException('non-nullable copy_policy_enabled cannot be null');
        }
        $this->container['copy_policy_enabled'] = $copy_policy_enabled;

        return $this;
    }

    /**
     * Gets move_policy_enabled
     *
     * @return bool|null
     */
    public function getMovePolicyEnabled()
    {
        return $this->container['move_policy_enabled'];
    }

    /**
     * Sets move_policy_enabled
     *
     * @param bool|null $move_policy_enabled If *true*, Veeam Backup & Replication moves backup files that belong to inactive backup chains from the performance extents to the capacity extent.
     *
     * @return self
     */
    public function setMovePolicyEnabled($move_policy_enabled)
    {
        if (is_null($move_policy_enabled)) {
            throw new \InvalidArgumentException('non-nullable move_policy_enabled cannot be null');
        }
        $this->container['move_policy_enabled'] = $move_policy_enabled;

        return $this;
    }

    /**
     * Gets operational_restore_period_days
     *
     * @return int|null
     */
    public function getOperationalRestorePeriodDays()
    {
        return $this->container['operational_restore_period_days'];
    }

    /**
     * Sets operational_restore_period_days
     *
     * @param int|null $operational_restore_period_days Number of days after which inactive backup chains on the performance extents are moved to the capacity extent. Specify *0* to offload inactive backup chains on the same day they are created.
     *
     * @return self
     */
    public function setOperationalRestorePeriodDays($operational_restore_period_days)
    {
        if (is_null($operational_restore_period_days)) {
            throw new \InvalidArgumentException('non-nullable operational_restore_period_days cannot be null');
        }
        $this->container['operational_restore_period_days'] = $operational_restore_period_days;

        return $this;
    }

    /**
     * Gets override_policy
     *
     * @return \OpenAPI\Client\Model\CapacityTierOverridePolicyModel|null
     */
    public function getOverridePolicy()
    {
        return $this->container['override_policy'];
    }

    /**
     * Sets override_policy
     *
     * @param \OpenAPI\Client\Model\CapacityTierOverridePolicyModel|null $override_policy override_policy
     *
     * @return self
     */
    public function setOverridePolicy($override_policy)
    {
        if (is_null($override_policy)) {
            throw new \InvalidArgumentException('non-nullable override_policy cannot be null');
        }
        $this->container['override_policy'] = $override_policy;

        return $this;
    }

    /**
     * Gets encryption
     *
     * @return \OpenAPI\Client\Model\BackupStorageSettingsEncryptionModel|null
     */
    public function getEncryption()
    {
        return $this->container['encryption'];
    }

    /**
     * Sets encryption
     *
     * @param \OpenAPI\Client\Model\BackupStorageSettingsEncryptionModel|null $encryption encryption
     *
     * @return self
     */
    public function setEncryption($encryption)
    {
        if (is_null($encryption)) {
            throw new \InvalidArgumentException('non-nullable encryption cannot be null');
        }
        $this->container['encryption'] = $encryption;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


